<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cockpit Project - tutorial</title><link href="http://cockpit-project.org/blog/" rel="alternate"></link><link href="http://cockpit-project.org/blog/feeds/tutorial.atom.xml" rel="self"></link><id>http://cockpit-project.org/blog/</id><updated>2015-10-08T00:00:00+00:00</updated><entry><title>Using Vagrant to Develop Cockpit</title><link href="http://cockpit-project.org/blog/cockpit-vagrantfile.html" rel="alternate"></link><published>2015-10-08T00:00:00+00:00</published><updated>2015-10-08T00:00:00+00:00</updated><author><name>Cockpit Project</name></author><id>tag:cockpit-project.org,2015-10-08:/blog/cockpit-vagrantfile.html</id><summary type="html">&lt;p&gt;Starting with Cockpit release 0.79 you can use &lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; to bring up a &lt;span class="caps"&gt;VM&lt;/span&gt; in which
you can test or develop Cockpit. The &lt;span class="caps"&gt;VM&lt;/span&gt; is isolated from your main system so any system configuration
you change via Cockpit will only happen in the &lt;span class="caps"&gt;VM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The Vagrant &lt;span class="caps"&gt;VM&lt;/span&gt; mounts the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Starting with Cockpit release 0.79 you can use &lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; to bring up a &lt;span class="caps"&gt;VM&lt;/span&gt; in which
you can test or develop Cockpit. The &lt;span class="caps"&gt;VM&lt;/span&gt; is isolated from your main system so any system configuration
you change via Cockpit will only happen in the &lt;span class="caps"&gt;VM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The Vagrant &lt;span class="caps"&gt;VM&lt;/span&gt; mounts the Cockpit package assets from your git repository checkout, so when you make on the
host system, you can refresh the browser and immediately see the resulting changes. For changes to
C code, the Cockpit binaries would have to be rebuilt and testing via Vagrant won&amp;#8217;t&amp;nbsp;work.&lt;/p&gt;
&lt;h2&gt;Getting&amp;nbsp;Started&lt;/h2&gt;
&lt;p&gt;To start, you&amp;#8217;ll need Vagrant. On Fedora I use &lt;em&gt;vagrant-libvirt&lt;/em&gt;. In addition keep in mind that on
&lt;em&gt;vagrant-libvirt&lt;/em&gt; requires root privileges, so you&amp;#8217;ll need to use vagrant with &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install vagrant vagrant-libvirt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, in a copy of the Cockpit git repository, you run &lt;code&gt;vagrant up&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/cockpit-project/cockpit
$ cd cockpit
$ sudo vagrant up
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first time this runs it&amp;#8217;ll take a while, but eventually you&amp;#8217;ll have a Vagrant &lt;span class="caps"&gt;VM&lt;/span&gt; running. When you
do this step again, it should be pretty&amp;nbsp;fast.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;VM&lt;/span&gt; will
listen for connections on your local machine&amp;#8217;s &lt;a href="http://localhost:9090"&gt;&lt;code&gt;http://localhost:9090&lt;/code&gt;&lt;/a&gt;, but
even though you&amp;#8217;re connecting to &lt;em&gt;localhost&lt;/em&gt; it&amp;#8217;ll be Cockpit in the &lt;span class="caps"&gt;VM&lt;/span&gt; you&amp;#8217;re talking&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;If you already have Cockpit running on your local machine, then this won&amp;#8217;t work, and you&amp;#8217;ll need to
use the &lt;span class="caps"&gt;IP&lt;/span&gt; address of the &lt;span class="caps"&gt;VM&lt;/span&gt; instead of &lt;em&gt;localhost&lt;/em&gt;. To find&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vagrant ssh-config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Two user accounts are created in the &lt;span class="caps"&gt;VM&lt;/span&gt;, and you can use either one to log into&amp;nbsp;Cockpit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User: &amp;#8220;admin&amp;#8221; Password:&amp;nbsp;&amp;#8220;foobar&amp;#8221;&lt;/li&gt;
&lt;li&gt;User: &amp;#8220;root&amp;#8221; Password:&amp;nbsp;&amp;#8220;foobar&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Testing a Pull&amp;nbsp;Request&lt;/h2&gt;
&lt;p&gt;If there&amp;#8217;s a Cockpit &lt;a href="https://github.com/cockpit-project/cockpit/pulls"&gt;pull request&lt;/a&gt; that you&amp;#8217;d like to
test, you can now do that with the Vagrant &lt;span class="caps"&gt;VM&lt;/span&gt;.  Replace the &lt;em&gt;0000&lt;/em&gt; in the following command with the
number of the pull&amp;nbsp;request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git fetch origin pull/0000/head
$ git checkout FETCH_HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The pull request can only contain code to Cockpit package assets. If it contains changes to the &lt;code&gt;src/&lt;/code&gt;
directory, then the pull request involves rebuilding binaries, and testing it via Vagrant won&amp;#8217;t&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;Now refresh your browser, or if necessary, login again. You should see the changes in the pull request
reflected in&amp;nbsp;Cockpit.&lt;/p&gt;
&lt;h2&gt;Making a&amp;nbsp;change&lt;/h2&gt;
&lt;p&gt;You can make a change to Cockpit while testing that out in your Vagrant &lt;span class="caps"&gt;VM&lt;/span&gt;. The changes should be
to Cockpit package assets. If you change something in the &lt;code&gt;src/&lt;/code&gt; directory, then binaries will have
to be rebuilt, and testing it via Vagrant won&amp;#8217;t&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I chose change some wording in the sidebar in &lt;code&gt;pkg/shell/index.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          &amp;lt;a data-toggle=&amp;quot;collapse&amp;quot; data-target=&amp;quot;#tools-panel&amp;quot; class=&amp;quot;collapsed&amp;quot; translatable=&amp;quot;yes&amp;quot;&amp;gt;
-           Tools
+           Beavers &amp;#39;n Ducks
          &amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And after refreshing Cockpit, I can see that&amp;nbsp;change:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Showing the change made" src="images/vagrant-change.png"&gt;&lt;/p&gt;
&lt;p&gt;The same applies to javascript or &lt;span class="caps"&gt;CSS&lt;/span&gt; changes as well. In order to actually contribute a change to Cockpit
you&amp;#8217;ll want to look at the information about
&lt;a href="https://github.com/cockpit-project/cockpit/wiki/Contributing"&gt;Contributing&lt;/a&gt; and if you need help
understanding how to add a
&lt;a href="http://cockpit-project.org/blog/creating-plugins-for-the-cockpit-user-interface.html"&gt;plugin package&lt;/a&gt;
you can look at the &lt;a href="http://cockpit-project.org/guide/latest/development.html"&gt;Developer Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Bringing the Vagrant &lt;span class="caps"&gt;VM&lt;/span&gt; in&amp;nbsp;sync&lt;/h2&gt;
&lt;p&gt;After each Cockpit release, there will be new binary parts to Cockpit. In order to continue to use the
Vagrant &lt;span class="caps"&gt;VM&lt;/span&gt;, you&amp;#8217;ll need to rebuild it. A message like this should appear when that&amp;#8217;s&amp;nbsp;necessary.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cockpit is incompatible with sources" src="images/cockpit-incompatible-sources.png"&gt;&lt;/p&gt;
&lt;p&gt;Rebuild the Vagrant &lt;span class="caps"&gt;VM&lt;/span&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vagrant destroy
$ sudo vagrant up
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;On Fedora, FirewallD got in the way of Vagrants use of &lt;span class="caps"&gt;NFS&lt;/span&gt;. On my machine, I had to do this
to get it to&amp;nbsp;work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo firewall-cmd --set-default-zone=trusted
&lt;/pre&gt;&lt;/div&gt;</content><category term="cockpit"></category><category term="linux"></category></entry><entry><title>Making REST calls from Javascript in Cockpit</title><link href="http://cockpit-project.org/blog/making-rest-calls-from-javascript-in-cockpit.html" rel="alternate"></link><published>2015-07-10T00:00:00+00:00</published><updated>2015-07-10T00:00:00+00:00</updated><author><name>Cockpit Project</name></author><id>tag:cockpit-project.org,2015-07-10:/blog/making-rest-calls-from-javascript-in-cockpit.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Note: This post has been updated for changes in Cockpit 0.90 and&amp;nbsp;later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cockpit-project.org"&gt;Cockpit is a user interface for servers&lt;/a&gt;. In &lt;a href="http://cockpit-project.org/blog/creating-plugins-for-the-cockpit-user-interface.html"&gt;earlier&lt;/a&gt; &lt;a href="http://cockpit-project.org/blog/using-dbus-from-javascript-in-cockpit.html"&gt;tutorials&lt;/a&gt; there&amp;#8217;s a guide on how to add components to&amp;nbsp;Cockpit.&lt;/p&gt;
&lt;p&gt;Not all of the &lt;a href="http://cockpit-project.org/blog/d-bus-is-powerful-ipc.html"&gt;system APIs use DBus&lt;/a&gt;. So sometimes we find ourselves in a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Note: This post has been updated for changes in Cockpit 0.90 and&amp;nbsp;later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cockpit-project.org"&gt;Cockpit is a user interface for servers&lt;/a&gt;. In &lt;a href="http://cockpit-project.org/blog/creating-plugins-for-the-cockpit-user-interface.html"&gt;earlier&lt;/a&gt; &lt;a href="http://cockpit-project.org/blog/using-dbus-from-javascript-in-cockpit.html"&gt;tutorials&lt;/a&gt; there&amp;#8217;s a guide on how to add components to&amp;nbsp;Cockpit.&lt;/p&gt;
&lt;p&gt;Not all of the &lt;a href="http://cockpit-project.org/blog/d-bus-is-powerful-ipc.html"&gt;system APIs use DBus&lt;/a&gt;. So sometimes we find ourselves in a situation where we have to use &lt;span class="caps"&gt;REST&lt;/span&gt; (which is often just treated as another word for &lt;span class="caps"&gt;HTTP&lt;/span&gt;) to talk to certain parts of the system. For example &lt;a href="https://docs.docker.com/reference/api/docker_remote_api/"&gt;Docker has a &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this tutorial you&amp;#8217;ll need at least Cockpit 0.58. There was one last tweak that helped with the &lt;code&gt;superuser&lt;/code&gt; option you see below. You can install it in &lt;a href="http://cockpit-project.org/running.html"&gt;Fedora 22&lt;/a&gt; or &lt;a href="https://github.com/cockpit-project/cockpit/blob/master/HACKING.md"&gt;build it from git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here we&amp;#8217;ll make a package called &lt;em&gt;docker-info&lt;/em&gt; which shows info about the docker daemon. We use the &lt;code&gt;/info&lt;/code&gt; &lt;a href="https://docs.docker.com/reference/api/docker_remote_api_v1.18/#display-system-wide-information"&gt;docker &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; to retrieve that&amp;nbsp;info.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve prepared the &lt;a href="http://cockpit-project.org/files/docker-info.tgz"&gt;docker-info package here&lt;/a&gt;. It&amp;#8217;s just two files. To download them and extract to your current directory, and installs it as a Cockpit&amp;nbsp;package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://cockpit-project.org/files/docker-info.tgz -O - | tar -xzf -
$ cd docker-info/
$ mkdir -p ~/.local/share/cockpit
$ ln -snf $PWD ~/.local/share/cockpit/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Previously we &lt;a href="http://cockpit-project.org/blog/creating-plugins-for-the-cockpit-user-interface.html"&gt;talked about&lt;/a&gt; how packages are installed, and what &lt;code&gt;manifest.json&lt;/code&gt; does so I won&amp;#8217;t repeat myself here. But to make sure the above worked correctly, you can run the following command. You should see &lt;code&gt;docker-info&lt;/code&gt; listed in the&amp;nbsp;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cockpit-bridge --packages
...
docker-info: .../.local/share/cockpit/docker-info
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you&amp;#8217;re logged into Cockpit on this machine, first log out. And log in again. Make sure to log into Cockpit with your current user name, since you installed the package in your home directory. You should now see a new item in the &lt;em&gt;Tools&lt;/em&gt; menu called &lt;em&gt;Docker Info&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Docker Info tool" src="images/cockpit-docker-info.png"&gt;&lt;/p&gt;
&lt;p&gt;After a moment, you should see numbers pop up with some stats about the docker daemon. Now in a terminal try to run something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker run -ti fedora /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see the numbers update as the container is pulled and started. When you type &lt;code&gt;exit&lt;/code&gt; in the container, you should see the numbers update again. How is this happening? Lets take a look at the &lt;code&gt;docker-info&lt;/code&gt; &lt;span class="caps"&gt;HTML&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Docker Info&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/jquery.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container-fluid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Docker Daemon Info&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Total Memory: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker-memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;?&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Go Routines: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker-routines&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;?&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;File Descriptors: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker-files&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;?&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Containers: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker-containers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;?&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Images: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;docker-images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;?&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cockpit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/run/docker.sock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;superuser&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;try&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;retrieve_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process_info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;print_failure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;process_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MemTotal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-routines&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NGoroutines&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-files&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NFd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-containers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Containers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Images&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* First time */&lt;/span&gt;
        &lt;span class="nx"&gt;retrieve_info&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;got_event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;always&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;print_failure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;got_event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;retrieve_info&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print_failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First we include &lt;code&gt;jquery.js&lt;/code&gt; and &lt;code&gt;cockpit.js&lt;/code&gt;. &lt;code&gt;cockpit.js&lt;/code&gt; defines the basic &lt;span class="caps"&gt;API&lt;/span&gt; for interacting with the system, as well as Cockpit itself. You can find &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html"&gt;detailed documentation here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/jquery.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also include the cockpit.css file to make sure the look of our tool matches that of Cockpit. The &lt;span class="caps"&gt;HTML&lt;/span&gt; is pretty basic, defining a little list where the info&amp;nbsp;shown.&lt;/p&gt;
&lt;p&gt;In the javascript code, first we setup an &lt;span class="caps"&gt;HTTP&lt;/span&gt; client to access docker. Docker listens for &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests on a Unix socket called &lt;code&gt;/var/run/docker.sock&lt;/code&gt;. In addition the permissions on that socket often require escalated privileges to access, so we tell Cockpit to try to gain &lt;code&gt;superuser&lt;/code&gt; privileges for this task, but continue anyway if it&amp;nbsp;cannot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cockpit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/run/docker.sock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;superuser&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;try&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First we define how to retrieve info from Docker. We use the &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;code&gt;/info&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt; to do&amp;nbsp;this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function retrieve_info() {
    var info = docker.get(&amp;quot;/info&amp;quot;);
    info.done(process_info);
    info.fail(print_failure);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a browser you cannot stop and wait until a &lt;span class="caps"&gt;REST&lt;/span&gt; call completes. Anything that doesn&amp;#8217;t happen instantaneously gets its results reported back to you by &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#cockpit-http-done"&gt;means of callback handlers&lt;/a&gt;. jQuery has a standard interface &lt;a href="http://api.jquery.com/deferred.promise/"&gt;called a promise&lt;/a&gt;. You add handlers by calling the &lt;code&gt;.done()&lt;/code&gt; or &lt;code&gt;.fail()&lt;/code&gt; methods and registering&amp;nbsp;callbacks.&lt;/p&gt;
&lt;p&gt;The result of the &lt;code&gt;/info&lt;/code&gt; call is &lt;span class="caps"&gt;JSON&lt;/span&gt;, and we process it here. This is standard jQuery for filling in text data into the various&amp;nbsp;elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;process_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MemTotal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-routines&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NGoroutines&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-files&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NFd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-containers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Containers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#docker-images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Images&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then we trigger the invocation of our &lt;code&gt;/info&lt;/code&gt; &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;call.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* First time */&lt;/span&gt;
&lt;span class="nx"&gt;retrieve_info&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because we want to react to changes in Docker state, we also start a long request to its &lt;code&gt;/events&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;.get("/events")&lt;/code&gt; call returns a jQuery Promise. When a line of event data arrives, the &lt;code&gt;.stream()&lt;/code&gt; callback in invoked, and we use it to trigger a reload of the Docker&amp;nbsp;info.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;got_event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;always&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;print_failure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;got_event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;retrieve_info&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a simple example, but I hope it helps you get started. There are further &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-http"&gt;javascript calls&lt;/a&gt;. Obviously you can also do &lt;code&gt;POST&lt;/code&gt; and so&amp;nbsp;on.&lt;/p&gt;</content><category term="cockpit"></category><category term="linux"></category></entry><entry><title>Protocol for Web access to System APIs</title><link href="http://cockpit-project.org/blog/protocol-for-web-access-to-system-apis.html" rel="alternate"></link><published>2014-12-16T00:00:00+00:00</published><updated>2014-12-16T00:00:00+00:00</updated><author><name>Cockpit Project</name></author><id>tag:cockpit-project.org,2014-12-16:/blog/protocol-for-web-access-to-system-apis.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Note: This post has been updated for changes in Cockpit 0.48 and&amp;nbsp;later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A Linux system today has a lot of local system configuration APIs. I&amp;#8217;m not talking about library APIs here, but things like DBus services, command/scripts to be executed, or files placed in various locations …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Note: This post has been updated for changes in Cockpit 0.48 and&amp;nbsp;later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A Linux system today has a lot of local system configuration APIs. I&amp;#8217;m not talking about library APIs here, but things like DBus services, command/scripts to be executed, or files placed in various locations. All of these constitute the &lt;span class="caps"&gt;API&lt;/span&gt; by which we configure a Linux system. In &lt;a href="http://cockpit-project.org"&gt;Cockpit&lt;/a&gt; we access these APIs from a web browser (after authentication of&amp;nbsp;course).&lt;/p&gt;
&lt;p&gt;How do we access the system APIs? The answer is the &lt;code&gt;cockpit-bridge&lt;/code&gt; tool. It proxies requests from the Cockpit user interface, running in a web browser, to the system. Typically the &lt;code&gt;cockpit-bridge&lt;/code&gt; runs as the logged in user, in a user session. It has similar permissions and capabilities as if you had used &lt;code&gt;ssh&lt;/code&gt; to log into the&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;Lets look at an example DBus &lt;span class="caps"&gt;API&lt;/span&gt; that we call from Cockpit. systemd has an &lt;span class="caps"&gt;API&lt;/span&gt; to set the system host name, called &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/hostnamed/"&gt;SetStaticHostname&lt;/a&gt;. In Cockpit we can invoke that &lt;span class="caps"&gt;API&lt;/span&gt; using simple &lt;span class="caps"&gt;JSON&lt;/span&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;call&amp;quot;: [
    &amp;quot;/org/freedesktop/hostname1&amp;quot;,
    &amp;quot;org.freedesktop.hostname1&amp;quot;,
    &amp;quot;SetStaticHostname&amp;quot;, [ &amp;quot;mypinkpony.local&amp;quot;, true ]
  ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The protocol that the web browser uses is a &lt;a href="https://github.com/cockpit-project/cockpit/blob/master/doc/protocol.md"&gt;message based protocol&lt;/a&gt;, and runs over a &lt;a href="http://en.wikipedia.org/wiki/WebSocket"&gt;WebSocket&lt;/a&gt;. This is a &amp;#8220;post-&lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;#8221; protocol, and isn&amp;#8217;t limited by the request/response semantics inherent to &lt;span class="caps"&gt;HTTP&lt;/span&gt;. Our protocol has a lot of &lt;span class="caps"&gt;JSON&lt;/span&gt;, and has a number of interesting characteristics, which you&amp;#8217;ll see below. In general we&amp;#8217;ve tried to keep this protocol readable and&amp;nbsp;debuggable.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cockpit-bridge&lt;/code&gt; tool speaks this protocol on its standard in and standard output. The &lt;code&gt;cockpit-ws&lt;/code&gt; process hosts the WebSocket and passes the messages to &lt;code&gt;cockpit-bridge&lt;/code&gt; for&amp;nbsp;processing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Following along:&lt;/strong&gt; In order to follow along with the stuff below, you&amp;#8217;ll need at least Cockpit 0.48. The protocol is not yet frozen, and we merged some cleanup recently. You can install it on &lt;a href="https://lists.fedorahosted.org/pipermail/cockpit-devel/2014-November/000196.html"&gt;Fedora 21 using a &lt;span class="caps"&gt;COPR&lt;/span&gt;&lt;/a&gt; or &lt;a href="https://github.com/cockpit-project/cockpit/blob/master/HACKING.md"&gt;build it from git&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Channels&lt;/h2&gt;
&lt;p&gt;Cockpit can be doing lots of things at the same time and we don&amp;#8217;t want to have to open a new WebSocket each time. So we allow the protocol to be shared by multiple concurrent tasks. Each of these is assigned a &lt;em&gt;channel&lt;/em&gt;. Channels have a string identifier. The data transferred in a channel is called the payload. To combine these into a message I simply concatenate the identifier, a new line, and the payload. Lets say I wanted to send the message &lt;code&gt;Oh marmalade!&lt;/code&gt; over the channel called &lt;code&gt;scruffy&lt;/code&gt; the message would look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scruffy
Oh marmalade!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How do we know what channel to send messages on? We send &lt;em&gt;control messages&lt;/em&gt; on a &lt;em&gt;control channel&lt;/em&gt; to open other channels, and indicate what they should do. The identifier for the control channel is an empty string. More on that&amp;nbsp;below.&lt;/p&gt;
&lt;h2&gt;Framing&lt;/h2&gt;
&lt;p&gt;In order to pass a message based protocol over a plain stream, such the standard in and standard out of &lt;code&gt;cockpit-bridge&lt;/code&gt;, one needs some form of framing. This framing is not used when the messages are passed over a WebSocket, since WebSockets inherently have a message&amp;nbsp;concept.&lt;/p&gt;
&lt;p&gt;The framing the &lt;code&gt;cockpit-bridge&lt;/code&gt; uses is simply the byte length of the message, encoded as a string, and followed by a new line. So Scruffy&amp;#8217;s 21 byte message above, when sent over a stream, would like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;21
scruffy
Oh marmalade!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, when debugging or testing &lt;code&gt;cockpit-bridge&lt;/code&gt; you can run in an interactive mode, where we frame our messages by using boundaries. That way we don&amp;#8217;t have to count the byte length of all of our messages meticulously, if we&amp;#8217;re writing them by hand. We specify the boundary when invoking &lt;code&gt;cockpit-bridge&lt;/code&gt; like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cockpit-bridge --interact=----
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then we can send a message by using the &lt;code&gt;----&lt;/code&gt; boundary on a line by&amp;nbsp;itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scruffy
Oh marmalade!
----
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Control&amp;nbsp;channels&lt;/h2&gt;
&lt;p&gt;Before we can use a channel, we need to tell &lt;code&gt;cockpit-bridge&lt;/code&gt; about the channel and what that channel is meant to do. We do this with a &lt;em&gt;control message&lt;/em&gt; sent on the &lt;em&gt;control channel&lt;/em&gt;. The &lt;em&gt;control channel&lt;/em&gt; is a channel with an empty string as an identifier. Each control message is a &lt;span class="caps"&gt;JSON&lt;/span&gt; object, or dict. Each control message has a &lt;code&gt;"command"&lt;/code&gt; field, which determines what kind of control message it&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;"open"&lt;/code&gt; control message opens a new channel. The &lt;code&gt;"payload"&lt;/code&gt; field indicates the type of the channel, so that &lt;code&gt;cockpit-bridge&lt;/code&gt; knows what to do with the messages. The various &lt;a href="https://github.com/cockpit-project/cockpit/blob/master/doc/protocol.md"&gt;channel types are documented&lt;/a&gt;. Some channels connect talk to a DBus service, others spawn a process,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;When you send an &lt;code&gt;"open"&lt;/code&gt; you also choose a new channel identifier and place it in the &lt;code&gt;"channel"&lt;/code&gt; field. This channel identifier must not already be in&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;"echo"&lt;/code&gt; channel type just sends the messages you send to the &lt;code&gt;cockpit-bridge&lt;/code&gt; back to you. Here&amp;#8217;s the control message that is used to open an echo channel. Note the empty channel identifier on the first&amp;nbsp;line:&lt;/p&gt;
&lt;pre&gt;

{
  "command": "open",
  "channel": "mychannel",
  "payload": "echo"
}
&lt;/pre&gt;

&lt;p&gt;Now we&amp;#8217;re ready to play &amp;#8230; Well&amp;nbsp;almost.&lt;/p&gt;
&lt;p&gt;The very first control message sent to and from &lt;code&gt;cockpit-bridge&lt;/code&gt; shuld be an &lt;code&gt;"init"&lt;/code&gt; message containing a version number. That version number is &lt;code&gt;1&lt;/code&gt; for the forseeable&amp;nbsp;future.&lt;/p&gt;
&lt;pre&gt;

{
  "command": "init",
  "version": 1
}
&lt;/pre&gt;

&lt;h2&gt;Try it&amp;nbsp;out&lt;/h2&gt;
&lt;p&gt;So combining our knowledge so far, we can run the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cockpit-bridge --interact=----
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this debugging mode sent by &lt;code&gt;cockpit-bridge&lt;/code&gt; will be bold in your terminal. Now paste the following&amp;nbsp;in:&lt;/p&gt;
&lt;pre&gt;

{ "command": "open", "channel": "mychannel", "payload": "echo" }
----
mychannel
This is a test
----
&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ll notice that &lt;code&gt;cockpit-bridge&lt;/code&gt; sends your message back. You can use this tecnique to experiment. Unfortunately
&lt;code&gt;cockpit-bridge&lt;/code&gt; exits immediately when it&amp;#8217;s stdin closes, so you &lt;a href="https://github.com/cockpit-project/cockpit/issues/1594"&gt;can&amp;#8217;t yet use shell redirection from a file effectively&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Making a DBus method&amp;nbsp;call&lt;/h2&gt;
&lt;p&gt;To make a DBus method call, we open a channel with the payload type &lt;code&gt;"dbus-json3"&lt;/code&gt;. Then we send &lt;span class="caps"&gt;JSON&lt;/span&gt; messages as payloads inside that channel. An additional field in the &lt;code&gt;"open"&lt;/code&gt; control message is required. The &lt;code&gt;"name"&lt;/code&gt; field is the bus name of the DBus service we want to talk&amp;nbsp;to:&lt;/p&gt;
&lt;pre&gt;

{
  "command": "open",
  "channel": "mydbus",
  "payload": "dbus-json3",
  "name": "org.freedesktop.systemd1"
}
&lt;/pre&gt;

&lt;p&gt;Once the channel is open we send a &lt;span class="caps"&gt;JSON&lt;/span&gt; object as a payload in the channel with a &lt;code&gt;"call"&lt;/code&gt; field. It is set to an array with the DBus interface, DBus object path, method name, and an array of&amp;nbsp;arguments.&lt;/p&gt;
&lt;pre&gt;
mydbus
{
  "call": [ "/org/freedesktop/hostname1", "org.freedesktop.hostname1",
            "SetStaticHostname", [ "mypinkpony.local", true ] ],
  "id": "cookie"
}
&lt;/pre&gt;

&lt;p&gt;If we want a reply from the service we specify an &lt;code&gt;"id"&lt;/code&gt; field. The resulting &lt;code&gt;"reply"&lt;/code&gt; will have a matching &lt;code&gt;"id"&lt;/code&gt; and would look something like&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;
mydbus
{
  "reply": [ null ],
  "id": "cookie"
}
&lt;/pre&gt;

&lt;p&gt;If an error occured you would see a reply like&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;
mydbus
{
  "error": [
    "org.freedesktop.DBus.Error.UnknownMethod",
    [ "MyMethodName not available"]
  ],
  "id":"cookie"
}
&lt;/pre&gt;

&lt;p&gt;This is just the basics. You can do much more than this with DBus, including watching for signals, lookup up properties, tracking when they change, introspecting services, watching for new objects to show up, and so&amp;nbsp;on.&lt;/p&gt;
&lt;h2&gt;Spawning a&amp;nbsp;process&lt;/h2&gt;
&lt;p&gt;Spawning a process is easier than calling a DBus method. You open the channel with the payload type &lt;code&gt;"stream"&lt;/code&gt; and you specify the process you would like to spawn in the &lt;code&gt;"open"&lt;/code&gt; control&amp;nbsp;message:&lt;/p&gt;
&lt;pre&gt;

{
  "command": "open",
  "channel": "myproc",
  "payload": "stream",
  "spawn": [ "ip", "addr", "show" ]
}
&lt;/pre&gt;

&lt;p&gt;The process will send its output in the payload of one or more messages of the &lt;code&gt;"myproc"&lt;/code&gt; channel, and at the end you&amp;#8217;ll encounter the &lt;code&gt;"close"&lt;/code&gt; control message. We haven&amp;#8217;t looked at until now. A &lt;code&gt;"close"&lt;/code&gt; control message is sent when a channel closes. Either the &lt;code&gt;cockpit-bridge&lt;/code&gt; or its caller can send this message to close a channel. Often the &lt;code&gt;"close"&lt;/code&gt; message contains additional information, such as a problem encountered, or in this case the exit status of the&amp;nbsp;process:&lt;/p&gt;
&lt;pre&gt;

{
  "command": "close",
  "channel": "myproc",
  "exit-status": 0
}
&lt;/pre&gt;

&lt;h2&gt;Doing it over a&amp;nbsp;WebSocket&lt;/h2&gt;
&lt;p&gt;Obviously in Cockpit we send all of these messages from the browser through a WebSocket hosted by &lt;code&gt;cockpit-ws&lt;/code&gt;. &lt;code&gt;cockpit-ws&lt;/code&gt; then passes them on to &lt;code&gt;cockpit-bridge&lt;/code&gt;. You can communicate this way too, if you &lt;a href="http://cockpit-project.org/guide/cockpit.conf.5.html"&gt;configure Cockpit to accept different Websocket Origins&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;And on it&amp;nbsp;goes&lt;/h2&gt;
&lt;p&gt;There are payload types for reading files, replacing them, connecting to unix sockets, accessing system resource metrics, doing local &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests, and more. Once the protocol is stable, solid documentation is in&amp;nbsp;order.&lt;/p&gt;
&lt;p&gt;I hope that this has given some insight into how Cockpit works under the hood. If you&amp;#8217;re interested in using this same protocol, I&amp;#8217;d love to get feedback &amp;#8230; especially while the basics of the protocol are not yet&amp;nbsp;frozen.&lt;/p&gt;</content><category term="cockpit"></category><category term="linux"></category></entry><entry><title>Creating Plugins for the Cockpit User Interface</title><link href="http://cockpit-project.org/blog/creating-plugins-for-the-cockpit-user-interface.html" rel="alternate"></link><published>2014-11-13T00:00:00+00:00</published><updated>2014-11-13T00:00:00+00:00</updated><author><name>Cockpit Project</name></author><id>tag:cockpit-project.org,2014-11-13:/blog/creating-plugins-for-the-cockpit-user-interface.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Note: This post has been updated for changes in Cockpit 0.90 and&amp;nbsp;later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cockpit-project.org"&gt;Cockpit is a user interface for servers&lt;/a&gt;. And you can add stuff to that user interface. Cockpit is internally built of various components. Each component is &lt;span class="caps"&gt;HTML&lt;/span&gt;, with Javascript logic that makes it work, and &lt;span class="caps"&gt;CSS …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Note: This post has been updated for changes in Cockpit 0.90 and&amp;nbsp;later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cockpit-project.org"&gt;Cockpit is a user interface for servers&lt;/a&gt;. And you can add stuff to that user interface. Cockpit is internally built of various components. Each component is &lt;span class="caps"&gt;HTML&lt;/span&gt;, with Javascript logic that makes it work, and &lt;span class="caps"&gt;CSS&lt;/span&gt; to make it&amp;nbsp;pretty.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s real easy to create these components. Tools are components that show up in the &lt;em&gt;Tools&lt;/em&gt; menu in&amp;nbsp;Cockpit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tools menu" src="images/cockpit-tools-default.png"&gt;&lt;/p&gt;
&lt;p&gt;For example the &lt;em&gt;Terminal&lt;/em&gt; that you see there is implemented as a tool. But lets make ourselves another one. For this tutorial you&amp;#8217;ll need Cockpit 0.41. You can install it in &lt;a href="https://lists.fedorahosted.org/pipermail/cockpit-devel/2014-November/000196.html"&gt;Fedora 21&lt;/a&gt; or &lt;a href="https://github.com/cockpit-project/cockpit/blob/master/HACKING.md"&gt;build it from git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So break out your terminal, lets make a package called &lt;em&gt;pinger&lt;/em&gt; that checks whether your server has network connectivity to the Internet by pinging another host. Nothing too fancy. We&amp;#8217;ll just be spawning a process on the server to do the work. I&amp;#8217;ve prepared it for you as &lt;a href="http://cockpit-project.org/files/pinger.tgz"&gt;an example here&lt;/a&gt;, and we can look it over, and modify it. To download the example to your current&amp;nbsp;directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://cockpit-project.org/files/pinger.tgz -O - | tar -xzf -
$ cd pinger/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Components, and more specifically their &lt;span class="caps"&gt;HTML&lt;/span&gt; and Javascript files, live in package directories. In the package directory there&amp;#8217;s also a &lt;code&gt;manifest.json&lt;/code&gt; file which tells Cockpit about the package. The &lt;code&gt;pinger&lt;/code&gt; directory above is such a package. It&amp;#8217;s &lt;code&gt;manifest.json&lt;/code&gt; file looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    &amp;quot;version&amp;quot;: 0,
    &amp;quot;tools&amp;quot;: {
        &amp;quot;pinger&amp;quot;: {
            &amp;quot;label&amp;quot;: &amp;quot;Pinger&amp;quot;,
            &amp;quot;path&amp;quot;: &amp;quot;ping.html&amp;quot;
        }
    },
    &amp;quot;content-security-policy&amp;quot;: &amp;quot;default-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39; &amp;#39;unsafe-eval&amp;#39;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The manifest above has a &lt;code&gt;"tools"&lt;/code&gt; subsection. Each tool is listed in the &lt;em&gt;Tools&lt;/em&gt; menu by Cockpit. The &lt;code&gt;"path"&lt;/code&gt; is the name of the &lt;span class="caps"&gt;HTML&lt;/span&gt; file that implements the tool, and the &lt;code&gt;"label"&lt;/code&gt; is the text to show in the &lt;em&gt;Tools&lt;/em&gt;&amp;nbsp;menu.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll notice that we haven&amp;#8217;t told Cockpit about the package yet. To do so you either place or symlink the package into one of two&amp;nbsp;places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.local/share/cockpit&lt;/code&gt;&lt;br&gt;
In your home directory, for user specific packages, and ones that you&amp;#8217;re working on. You can edit these on the fly and just refresh your browser to see&amp;nbsp;changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/share/cockpit&lt;/code&gt;&lt;br&gt;
For installed packages available to all users. These should not be changed while Cockpit is&amp;nbsp;running.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we&amp;#8217;re going to be messing around with this package, lets symlink it into the former&amp;nbsp;location.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p ~/.local/share/cockpit
$ ln -snf $PWD ~/.local/share/cockpit/pinger
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can list which Cockpit packages are installed using the following command, and you should see &lt;code&gt;pinger&lt;/code&gt; listed among&amp;nbsp;them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cockpit-bridge --packages
...
pinger: /home/.../.local/share/cockpit/pinger
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you&amp;#8217;re logged into Cockpit on this machine, first log out. And log in again. Make sure to log into Cockpit with your current user name, since you installed the package in your home directory. You should now see a new item in the &lt;em&gt;Tools&lt;/em&gt;&amp;nbsp;menu:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tools menu with pinger" src="images/cockpit-tools-pinger.png"&gt;&lt;/p&gt;
&lt;p&gt;The pinger tool itself looks like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pinger tool" src="images/cockpit-pinger-tool.png"&gt;&lt;/p&gt;
&lt;p&gt;Lets take a look at the pinger &lt;span class="caps"&gt;HTML&lt;/span&gt;, and see how it&amp;nbsp;works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pinger&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/jquery.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container-fluid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;max-width: 400px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cockpit-form-table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Address&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;address&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8.8.8.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ping&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#result&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#ping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ping_run&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ping_run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cockpit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()]);&lt;/span&gt;
            &lt;span class="nx"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ping_success&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ping_output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ping_fail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ping_success&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ping_fail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ping_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;First we include &lt;code&gt;jquery.js&lt;/code&gt; and &lt;code&gt;cockpit.js&lt;/code&gt;. &lt;code&gt;cockpit.js&lt;/code&gt; defines the basic &lt;span class="caps"&gt;API&lt;/span&gt; for interacting with the system, as well as Cockpit itself. You can find &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html"&gt;detailed documentation here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/jquery.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also include the cockpit.css file to make sure the look of our tool matches that of Cockpit. The &lt;span class="caps"&gt;HTML&lt;/span&gt; is pretty basic, defining a little form with a field to type an address, a button to click to start the pinging, and an area to present output and&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;In the javascript code, first we get a bunch of variables pointing to the &lt;span class="caps"&gt;HTML&lt;/span&gt; elements we want to interact with.
Next we attach a handler to the &lt;em&gt;Ping&lt;/em&gt; button so that the &lt;code&gt;ping_run()&lt;/code&gt; function is called when it is&amp;nbsp;clicked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#ping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ping_run&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ping_run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;ping_run()&lt;/code&gt; function is where the magic happens. &lt;code&gt;cockpit.spawn&lt;/code&gt; is a function, &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-spawn"&gt;documented here&lt;/a&gt; that lets you spawn processes on the server and interact with them via stdin and stdout. Here we spawn the &lt;code&gt;ping&lt;/code&gt; command with some&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cockpit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a web browser you cannot block and wait until a method call completes. Anything that doesn&amp;#8217;t happen instantaneously gets its results reported back to you by &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-spawn-done"&gt;means of callback handlers&lt;/a&gt;. jQuery has a standard interface &lt;a href="http://api.jquery.com/deferred.promise/"&gt;called a promise&lt;/a&gt;. You add handlers by calling the &lt;code&gt;.done()&lt;/code&gt; or &lt;code&gt;.fail()&lt;/code&gt; methods and registering callbacks. &lt;code&gt;proc.stream()&lt;/code&gt; registers a callback to be invoked whenever the process produces&amp;nbsp;output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ping_success&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ping_output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ping_fail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ping_success()&lt;/code&gt; and &lt;code&gt;ping_fail()&lt;/code&gt; and &lt;code&gt;ping_output()&lt;/code&gt; update the display as you would&amp;nbsp;expect.&lt;/p&gt;
&lt;p&gt;So there you go &amp;#8230; it&amp;#8217;s a simple plugin to start off with &amp;#8230; next time we&amp;#8217;ll cover &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-dbus"&gt;how to use DBus&lt;/a&gt;, and then the real fun&amp;nbsp;begins.&lt;/p&gt;</content><category term="cockpit"></category><category term="linux"></category></entry><entry><title>Using DBus from Javascript in Cockpit</title><link href="http://cockpit-project.org/blog/using-dbus-from-javascript-in-cockpit.html" rel="alternate"></link><published>2014-11-13T00:00:00+00:00</published><updated>2014-11-13T00:00:00+00:00</updated><author><name>Cockpit Project</name></author><id>tag:cockpit-project.org,2014-11-13:/blog/using-dbus-from-javascript-in-cockpit.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Note: This post has been updated for changes in Cockpit 0.90 and&amp;nbsp;later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cockpit-project.org"&gt;Cockpit is a user interface for servers&lt;/a&gt;. As we covered in the &lt;a href="http://cockpit-project.org/blog/creating-plugins-for-the-cockpit-user-interface.html"&gt;last tutorial&lt;/a&gt; you can add user interface component to Cockpit, and build your own parts of the Server &lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Much of Cockpit interacts with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Note: This post has been updated for changes in Cockpit 0.90 and&amp;nbsp;later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cockpit-project.org"&gt;Cockpit is a user interface for servers&lt;/a&gt;. As we covered in the &lt;a href="http://cockpit-project.org/blog/creating-plugins-for-the-cockpit-user-interface.html"&gt;last tutorial&lt;/a&gt; you can add user interface component to Cockpit, and build your own parts of the Server &lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Much of Cockpit interacts with the server using DBus. We have a powerful yet simple &lt;span class="caps"&gt;API&lt;/span&gt; for doing that, and you should use DBus too when building your own Cockpit user interfaces. For this tutorial you&amp;#8217;ll need at least Cockpit 0.41. A few tweaks landed in that release to solve a couple rough edges we had in our DBus support. You can install it in &lt;a href="https://lists.fedorahosted.org/pipermail/cockpit-devel/2014-November/000196.html"&gt;Fedora 21&lt;/a&gt; or &lt;a href="https://github.com/cockpit-project/cockpit/blob/master/HACKING.md"&gt;build it from git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here we&amp;#8217;ll make a package called &lt;em&gt;zoner&lt;/em&gt; which lets you set the time zone of your server. We use the systemd &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/timedated/"&gt;timedated DBus &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; to do actually switch time&amp;nbsp;zones.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve prepared the &lt;a href="http://cockpit-project.org/files/zoner.tgz"&gt;zoner package here&lt;/a&gt;. It&amp;#8217;s just two files. To download them and extract to your current directory, and installs it as a Cockpit&amp;nbsp;package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://cockpit-project.org/files/zoner.tgz -O - | tar -xzf -
$ cd zoner/
$ mkdir -p ~/.local/share/cockpit
$ ln -snf $PWD ~/.local/share/cockpit/zoner
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Previously we &lt;a href="http://cockpit-project.org/blog/creating-plugins-for-the-cockpit-user-interface.html"&gt;talked about&lt;/a&gt; how packages are installed, and what &lt;code&gt;manifest.json&lt;/code&gt; does so I won&amp;#8217;t repeat myself here. But to make sure the above worked correctly, you can run the following command. You should see &lt;code&gt;zoner&lt;/code&gt; listed in the&amp;nbsp;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cockpit-bridge --packages
...
zoner: .../.local/share/cockpit/zoner
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you&amp;#8217;re logged into Cockpit on this machine, first log out. And log in again. Make sure to log into Cockpit with your current user name, since you installed the package in your home directory. You should now see a new item in the &lt;em&gt;Tools&lt;/em&gt; menu called &lt;em&gt;Time Zone&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pinger tool" src="images/cockpit-zoner-tool.png"&gt;&lt;/p&gt;
&lt;p&gt;Try it out by typing &lt;code&gt;Australia/Tasmania&lt;/code&gt; in the box, and clicking &lt;em&gt;Change&lt;/em&gt;. You should see that the &lt;em&gt;Time Zone&lt;/em&gt; changes. You can verify this by typing the following on the same server in a&amp;nbsp;terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ date
Sa 15. Nov 01:48:01 AEDT 2014
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try typing an invalid timezone like &lt;code&gt;blah&lt;/code&gt;, and you&amp;#8217;ll see an error message displayed. Now try changing the timezone from the terminal using the &lt;code&gt;timedatectl&lt;/code&gt; command while you have Cockpit open displaying your &lt;em&gt;Time Zone&lt;/em&gt;&amp;nbsp;screen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo timedatectl set-timezone UTC
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see your timezone on your screen update immediately to reflect the new state of the server. So how does this work? Lets take a look at the zoner &lt;span class="caps"&gt;HTML&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Time Zone&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/jquery.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container-fluid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;max-width: 400px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cockpit-form-table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Time Zone&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;current&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;New Zone&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-default btn-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;change&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Change&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failure&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#new&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#current&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#failure&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#change&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;change_zone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cockpit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;org.freedesktop.timedate1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timedate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timedate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;display_zone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;display_zone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timedate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Timezone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;change_zone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timedate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetTimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;change_fail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;change_fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First we include &lt;code&gt;jquery.js&lt;/code&gt; and &lt;code&gt;cockpit.js&lt;/code&gt;. &lt;code&gt;cockpit.js&lt;/code&gt; defines the basic &lt;span class="caps"&gt;API&lt;/span&gt; for interacting with the system, as well as Cockpit itself. You can find &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html"&gt;detailed documentation here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/jquery.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../base1/cockpit.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also include the cockpit.css file to make sure the look of our tool matches that of Cockpit. The &lt;span class="caps"&gt;HTML&lt;/span&gt; is pretty basic, defining a little form where the current timezone is shown, a field to type an address, a button to click change to a new one, and an area to show&amp;nbsp;errors.&lt;/p&gt;
&lt;p&gt;In the javascript code, first we get a bunch of variables pointing to the &lt;span class="caps"&gt;HTML&lt;/span&gt; elements we want to interact with.
Next we attach a handler to the &lt;em&gt;Change&lt;/em&gt; button so that the &lt;code&gt;change_zone()&lt;/code&gt; function is called when it is&amp;nbsp;clicked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#change&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;change_zone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we connect to the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/timedated/"&gt;timedated&lt;/a&gt; DBus service using the &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-dbus-dbus"&gt;&lt;code&gt;cockpit.dbus()&lt;/code&gt;&lt;/a&gt;&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cockpit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;org.freedesktop.timedate1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we make a proxy which represents a particular DBus interface containing methods and properties. Simple services have only one interface. When more than one interface or instance of that interface is present, there are additional arguments to the &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-dbus-proxy"&gt;&lt;code&gt;.proxy()&lt;/code&gt;&lt;/a&gt; method that you can&amp;nbsp;specify.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timedate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each interface proxy has a &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-dbus-proxy-onchanged"&gt;&lt;code&gt;"changed"&lt;/code&gt;&lt;/a&gt; event we can connect to. When properties on the proxy change, or are received for the first time, this event is fired. We use this to call our &lt;code&gt;display_zone()&lt;/code&gt; function and update the display of the current time&amp;nbsp;zone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timedate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;display_zone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Timezone&lt;/code&gt; is a property on the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/timedated/"&gt;timedated DBus interface&lt;/a&gt;. We can access these properties directly, and the proxy will keep them up to date. Here we use the property to update our display of the current time&amp;nbsp;zone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function display_zone() {
    current.text(timedate.Timezone);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;SetTimezone&lt;/code&gt; is a method on the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/timedated/"&gt;timedated DBus interface&lt;/a&gt; interface, and we can invoke it directly as we would a javascript function. In this case we pass the arguments the DBus method expects, a &lt;code&gt;timezone&lt;/code&gt; string, and a &lt;code&gt;user_interaction&lt;/code&gt; boolean.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function change_zone() {
    var call = timedate.SetTimezone(input.val(), true);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a web browser you cannot block and wait until a method call completes. Anything that doesn&amp;#8217;t happen instantaneously gets its results reported back to you by &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-dbus-done"&gt;means of callback handlers&lt;/a&gt;. jQuery has a standard interface &lt;a href="http://api.jquery.com/deferred.promise/"&gt;called a promise&lt;/a&gt;. You add handlers by calling the &lt;code&gt;.done()&lt;/code&gt; or &lt;code&gt;.fail()&lt;/code&gt; methods and registering&amp;nbsp;callbacks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    call.fail(change_fail);
    failure.empty();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;change_fail()&lt;/code&gt; displays any failures that happen. In this case, &lt;code&gt;SetTimezone&lt;/code&gt; DBus method has no return value, however if there were, we could use something like &lt;code&gt;call.done(myhandler)&lt;/code&gt; to register a handler to receive&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Notice that we relied on DBus to tell us when things changed and just updated the display from our event handler. That way we reacted both when the time zone changed due to an action in Cockpit, as well as an action on the&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;Again this is a simple example, but I hope it will whet your appetite to what &lt;a href="http://cockpit-project.org/guide/latest/api-cockpit.html#latest-dbus"&gt;Cockpit can do with DBus&lt;/a&gt;. Obviously you can also do signal handling, working with return values from methods, tracking all instances of a given interface, and other stuff you would expect to do as a DBus&amp;nbsp;client.&lt;/p&gt;</content><category term="cockpit"></category><category term="linux"></category></entry></feed>